keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
df %>%
group_by(!! keys_q) %>%
mutate(
!!values_q := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
df %>%
group_by(!! keys_q) %>%
mutate(
!!values_q = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
df %>%
group_by(!! keys_q) %>%
mutate(
impute_var = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(test)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
df %>%
group_by(!! keys_q) %>%
mutate(
quo_name(values_q) = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
x <- quo_name(values_q)
df %>%
group_by(!! keys_q) %>%
mutate(
x = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(test)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
x <- quo_name(values_q)
df %>%
group_by(!! keys_q) %>%
mutate(
!! x = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(test)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
x <- paste0(quo_name(values_q))
df %>%
group_by(!! keys_q) %>%
mutate(
!! x = case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
x <- quo_name(values_q)
df %>%
group_by(!! keys_q) %>%
mutate(
!! x := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
test <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(test)
# This last bit is just to show that it works
RESULT <- grouped_mean_imputation(WDI, countryName, gov_debt)
WDI$gov_debt - RESULT$gov_debt
View(RESULT)
View(WDI)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
varname <- quo_name(values_q)
dummy_name <- paste0("imputed_", varname)
df %>%
group_by(!! keys_q) %>%
mutate(
!! dummy_name := case_when(is.na(!! values_q) ~ 1,
T ~ 0),
!! name := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
RESULT <- grouped_mean_imputation(WDI, countryName, gov_debt)
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
varname <- quo_name(values_q)
dummy_name <- paste0("imputed_", varname)
df %>%
group_by(!! keys_q) %>%
mutate(
!! dummy_name := case_when(is.na(!! values_q) ~ 1,
T ~ 0),
!! varname := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
RESULT <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(RESULT)
library(tidyverse)
# Load data
load('wdi.rds')
fixed_mean <- function(x){
# Returns NA if there is nothing
# to take the mean of. Otherwise
# returns the mean.
#
# Arguments:
#   x: vector which can be
#      averaged.
v <- mean(x, na.rm = T)
if (is.nan(v)) {
return(NA_real_)
}
return(v)
}
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Creates a new column imputed_"impute_var":
# is 1 if the variable is either imputed, or
# still NA (no values in group to impute from).
# Is 0 if observation is original.
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
varname <- quo_name(values_q)
dummy_name <- paste0("imputed_", varname)
df %>%
group_by(!! keys_q) %>%
mutate(
!! dummy_name := case_when(is.na(!! values_q) ~ 1,
T ~ 0),
!! varname := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
RESULT <- grouped_mean_imputation(WDI, countryName, gov_debt)
library(tidyverse)
# Load data
load('wdi.rds')
fixed_mean <- function(x){
# Returns NA if there is nothing
# to take the mean of. Otherwise
# returns the mean.
#
# Arguments:
#   x: vector which can be
#      averaged.
v <- mean(x, na.rm = T)
if (is.nan(v)) {
return(NA_real_)
}
return(v)
}
grouped_mean_imputation <- function(df, group_var, impute_var){
# Mean imputes a column by groupl
#
# Creates a new column imputed_"impute_var":
# is 1 if the variable is either imputed, or
# still NA (no values in group to impute from).
# Is 0 if observation is original.
#
# Arguments:
#   df: a dataframel
#   group_var: the variable to group by.
#   impute_var: the variable to impute.
keys_q <- enquo(group_var)
values_q <- enquo(impute_var)
varname <- quo_name(values_q)
dummy_name <- paste0("imputed_", varname)
df %>%
group_by(!! keys_q) %>%
mutate(
!! dummy_name := case_when(is.na(!! values_q) ~ 1,
T ~ 0),
!! varname := case_when(is.na(!! values_q) ~ fixed_mean(gov_debt),
T ~ !! values_q)
)
}
# This last bit is just to show that it works
RESULT <- grouped_mean_imputation(WDI, countryName, gov_debt)
View(RESULT)
# Grouped timedependent deviation from mean
# Jeg vil gerne lave en funtion, der ser pÃ¥ hvordan at en observations vÃ¦rdi afviger
# fra gennemsnittet af variablen grupperet pÃ¥ land, og inden for en tidsperiode
# Funktionen skal tage 4 argumenter:
#     1) Dataframe
#     2) Variable / liste af variabler
#     3) variable der skal grupperes pÃ¥
#     4) Tidsperioden, for hvilket gennemsnittet skal udregnes.
# I mit forsÃ¸g nedenfor, lÃ¸ber jeg ind i fejlen  "Error in .... object 'time2' not found"
# jeg forestiller mig at det er mit mutate, der ikke spiller, men jeg kan ikke lige se,
# hvorfor det ikke skulle gÃ¸re det
library(tidyverse)
library(lubridate)
# Load data
df <- readRDS(file = "data.rds")
View(df)
df$date <- ymd(df$date)
grouped_time_mean = function(df,group_var, var, time_in_month){
#df <- Dataset
#group_var <- "p4n"
#var <- "q1cnt"
#time_in_month <- 6
groupvar_q <- enquo(group_var)
variable_q <- enquo(var)
varname <- quo_name(variable_q)
timename <- toString(time_in_month)
dummy_name <- paste0("t_",timename, "_", varname)
df %>%
group_by(!! groupvar_q) %>%
mutate(
time2 = df$date %m-% months(time_in_month),
!! dummy_name := !! variable_q - mean(!! variable_q[which(df$date %within% interval(df$date,df$time2))])) %>%
select(-"time2")
return(df)
}
#test
a <-  grouped_time_mean(df, p4n, q1cnt, 6)
grouped_time_mean = function(df,group_var, var, time_in_month){
#df <- Dataset
#group_var <- "p4n"
#var <- "q1cnt"
#time_in_month <- 6
groupvar_q <- enquo(group_var)
variable_q <- enquo(var)
varname <- quo_name(variable_q)
timename <- toString(time_in_month)
dummy_name <- paste0("t_",timename, "_", varname)
df %>%
group_by(!! groupvar_q) %>%
mutate(
time2 = df$date %m-% months(time_in_month),
!! dummy_name := !! variable_q - mean(!! variable_q[which(df$date %within% interval(df$date,df$time2))])) %>%
select(-"time2")
return(df)
}
#test
a <-  grouped_time_mean(df, p4n, q1cnt, 6)
df$date <- ymd(df$date)
grouped_time_mean = function(df,group_var, var, time_in_month){
#df <- Dataset
#group_var <- "p4n"
#var <- "q1cnt"
#time_in_month <- 6
groupvar_q <- enquo(group_var)
variable_q <- enquo(var)
varname <- quo_name(variable_q)
timename <- toString(time_in_month)
dummy_name <- paste0("t_",timename, "_", varname)
df %>%
group_by(!! groupvar_q) %>%
mutate(
time2 = df$date %m-% months(time_in_month),
!! dummy_name := !! variable_q - mean(!! variable_q[which(df$date %within% interval(df$date,df$time2))])) %>%
select(-"time2")
return(df)
}
#test
a <-  grouped_time_mean(df, p4n, q1cnt, 6)
source('~/GitHub/Kristian_h-lper_Frede-3/Opgave 2.R')
grouped_time_mean = function(df,group_var, var, time_in_month){
#df <- Dataset
#group_var <- "p4n"
#var <- "q1cnt"
#time_in_month <- 6
groupvar_q <- enquo(group_var)
variable_q <- enquo(var)
varname <- quo_name(variable_q)
timename <- toString(time_in_month)
dummy_name <- paste0("t_",timename, "_", varname)
df %>%
group_by(!! groupvar_q) %>%
mutate(
time2 = df$date %m-% months(time_in_month))
#   ,
#   !! dummy_name := !! variable_q - mean(!! variable_q[which(df$date %within% interval(df$date,df$time2))])) %>%
# select(-"time2")
return(df)
}
#test
a <-  grouped_time_mean(df, p4n, q1cnt, 6)
df %>%
group_by(p4n) %>%
mutate(
time2 = df$date %m-% months(6)
)
# Grouped timedependent deviation from mean
# Jeg vil gerne lave en funtion, der ser pÃ¥ hvordan at en observations vÃ¦rdi afviger
# fra gennemsnittet af variablen grupperet pÃ¥ land, og inden for en tidsperiode
# Funktionen skal tage 4 argumenter:
#     1) Dataframe
#     2) Variable / liste af variabler
#     3) variable der skal grupperes pÃ¥
#     4) Tidsperioden, for hvilket gennemsnittet skal udregnes.
# I mit forsÃ¸g nedenfor, lÃ¸ber jeg ind i fejlen  "Error in .... object 'time2' not found"
# jeg forestiller mig at det er mit mutate, der ikke spiller, men jeg kan ikke lige se,
# hvorfor det ikke skulle gÃ¸re det
library(tidyverse)
library(lubridate)
# Load data
df <- readRDS(file = "data.rds")
df$date <- ymd(df$date)
View(df)
# Grouped timedependent deviation from mean
# Jeg vil gerne lave en funtion, der ser pÃ¥ hvordan at en observations vÃ¦rdi afviger
# fra gennemsnittet af variablen grupperet pÃ¥ land, og inden for en tidsperiode
# Funktionen skal tage 4 argumenter:
#     1) Dataframe
#     2) Variable / liste af variabler
#     3) variable der skal grupperes pÃ¥
#     4) Tidsperioden, for hvilket gennemsnittet skal udregnes.
# I mit forsÃ¸g nedenfor, lÃ¸ber jeg ind i fejlen  "Error in .... object 'time2' not found"
# jeg forestiller mig at det er mit mutate, der ikke spiller, men jeg kan ikke lige se,
# hvorfor det ikke skulle gÃ¸re det
library(tidyverse)
library(lubridate)
# Load data
df <- readRDS(file = "data.rds")
df$date <- ymd(df$date)
grouped_time_mean = function(df,group_var, var, time_in_month){
#df <- Dataset
#group_var <- "p4n"
#var <- "q1cnt"
#time_in_month <- 6
groupvar_q <- enquo(group_var)
variable_q <- enquo(var)
varname <- quo_name(variable_q)
timename <- toString(time_in_month)
dummy_name <- paste0("t_",timename, "_", varname)
df %>%
group_by(!! groupvar_q) %>%
mutate(
time2 = df$date %m-% months(time_in_month),
!! dummy_name := !! variable_q - mean(!! variable_q[which(df$date %within% interval(df$date,df$time2))])) %>%
select(-"time2")
return(df)
}
df %>%
group_by(p4n) %>%
mutate(
time2 = df$date %m-% months(6)
)
df %>%
#  group_by(p4n) %>%
mutate(
time2 = df$date %m-% months(6)
)
df %>%
mutate(
time2 = df$date %m-% months(6)
) %>%
group_by(p4n) %>%
mutate(
asd = q1cnt - mean(q1cnt[which(df$date %within% interval(df$date, df$time2))])
)
test <- df %>%
mutate(
time2 = df$date %m-% months(6)
)
View(test)
test <- df %>%
mutate(
time2 = df$date %m-% months(6)
) %>%
group_by(p4n) %>%
mutate(
asd = q1cnt - mean(df$q1cnt[which(df$date %within% interval(df$date, df$time2))])
)
test <- df %>%
mutate(
time2 = df$date %m-% months(6)
) %>%
group_by(p4n) %>%
mutate(
asd = q1cnt - mean(q1cnt[which(date %within% interval(date, time2))])
)
View(test)
test <- df %>%
mutate(
time2 = df$date %m-% months(6)
) %>%
group_by(p4n) %>%
mutate(
mean_last_6_mo = mean(q1cnt[which(date %within% interval(date, time2))])
)
View(test)
test <- df %>%
group_by(p4n) %>%
mutate(time2 = date %m-% months(6))
View(test)
View(df)
df %>% filter(p4n == 700)
View(test)
test <- df %>% filter(p4n == 700) %>%
filter(date %within% interval(1988-02-01, 1988-12-01))
as.date(1988-02-01)
as.date("1988-02-01")
as.datetime("1988-02-01")
as_datetime("1988-02-01")
test <- df %>% filter(p4n == 700) %>%
filter(date %within% interval(as_datetime("1988-02-01"), as_datetime("1988-12-01")))
specialMean = function(x, date_start, date_end){
x %>%
filter(date %within% interval(date_start, date_end))
x
}
test <- df %>%
filter(p4n == 700)
specialMean = function(x, date_start, date_end){
y <- x %>%
filter(date %within% interval(date_start, date_end))
mean(y$q1cnt)
}
